// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

import { ConditionTargetType } from "./../common.sol";

/**
 * @title IFilterSystem
 * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
 */
interface IFilterSystem {
  function IsFilterFunctionExist(bytes4 selector) external view returns (bool);

  function FilterTargets(
    bytes4 filter,
    bytes32 game_uid,
    bytes32 ability_key,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external returns (bytes32[] memory);

  function FilterLowestHp(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterLowestAttack(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterRandom1(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterRandom2(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterRandom3(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterFirst1(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterFirst6(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);

  function FilterFirst7(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source,
    ConditionTargetType condition_type
  ) external view returns (bytes32[] memory);
}
