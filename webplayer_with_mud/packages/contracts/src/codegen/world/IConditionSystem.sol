// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

import { ConditionTargetType } from "./../common.sol";

/**
 * @title IConditionSystem
 * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
 */
interface IConditionSystem {
  function IsConditionFunctionExist(bytes4 selector) external view returns (bool);

  function IsTriggerConditionMet(
    bytes4 condition,
    bytes32 game_uid,
    bytes32 ability_key,
    bytes32 caster,
    ConditionTargetType condition_type
  ) external returns (bool);

  function IsTargetConditionMet(
    bytes4 condition,
    bytes32 game_uid,
    bytes32 ability_key,
    bytes32 caster,
    bytes32 target,
    ConditionTargetType condition_type
  ) external returns (bool);

  function HasBoardCardEnemy(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external returns (bool);

  function HasBoardCardSelf(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function HasDiscardCharacter(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function HasBoardCharacters2(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function HasDiscardSpell(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function AiIsAlly(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function AiIsEnemy(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsAlly(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsEnemy(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsArtifact(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSpell(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsEquipment(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsCharacter(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsHero(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSecret(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsCard(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsDeckbuilding(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsGrowth3(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external returns (bool);

  function IsInTemp(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsInHand(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsInDiscard(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsInDeck(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsInSecretArea(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsInEquipment(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsInBoard(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSlot(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external pure returns (bool);

  function IsSlotX1(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSlotSameP(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSlotNextTo(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSlotInRange(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsSlotEmpty(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsNotEmptySlot(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsPlayer(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external pure returns (bool);

  function IsWolf(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsDragon(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsGreen(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsRed(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsBlue(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsAttack_4L(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function Rolled_4P(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function OncePerTurn(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsNotYourTurn(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsNotSelf(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsNotEmpty(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);

  function IsNotStealth(
    bytes32 game_uid,
    bytes32 ability_key,
    ConditionTargetType condition_type,
    bytes32 caster,
    bytes32 target
  ) external view returns (bool);
}
