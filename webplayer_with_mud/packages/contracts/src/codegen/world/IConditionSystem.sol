// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

import { ConditionPlayerType, PileType, CardType, CardTeam, ConditionOperatorBool, ConditionOperatorInt } from "./../common.sol";

/**
 * @title IConditionSystem
 * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
 */
interface IConditionSystem {
  function FilterTargets(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterLowestHp(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterLowestAttack(
    bytes32 ability,
    bytes32 caster,
    bytes32[] memory source
  ) external returns (bytes32[] memory);

  function FilterRandom1(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterRandom2(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterRandom3(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterFirst1(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterFirst6(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function FilterFirst7(bytes32 ability, bytes32 caster, bytes32[] memory source) external returns (bytes32[] memory);

  function HasBoardCardEnemy() external;

  function HasBoardCardSelf() external;

  function HasBoardCharacters2() external;

  function HasDiscardSpell() external;

  function IsAlly() external;

  function IsArtifact(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsSpell(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsEquipment(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsCharacter(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsHero(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsSlot() external;

  function IsSlotX1() external;

  function IsSlotSameP() external;

  function IsSlotNextTo() external;

  function IsSlotInRange() external;

  function IsSlotEmpty() external;

  function IsPlayer() external;

  function IsAI() external;

  function IsWolf(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsDragon(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsGreen(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsRed(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsBlue(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function IsAttackL4(bytes32 ability_key, bytes32 caster, bytes32 target) external returns (bool);

  function ConditionCount(ConditionPlayerType target, PileType pile, CardType has_type, CardTeam has_team) external;

  function ConditionSlotDist(uint8 distance, bool diagonals) external;

  function CompareBool(bool condition, ConditionOperatorBool oper) external returns (bool);

  function CompareInt(int8 ival1, ConditionOperatorInt oper, int8 ival2) external returns (bool);

  function FilterFirst(
    uint8 amount,
    bytes32 ability_key,
    bytes32 caster,
    bytes32[] memory source
  ) external returns (bytes32[] memory);

  function FilterRandom(
    uint8 amount,
    bytes32 ability_key,
    bytes32 caster,
    bytes32[] memory source
  ) external returns (bytes32[] memory);
}
