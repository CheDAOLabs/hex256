// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("AiActions")))
);
ResourceId constant AiActionsTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x004a080020200102020202010000000000000000000000000000000000000000
);

struct AiActionsData {
  bytes32 card_uid;
  bytes32 target_uid;
  uint8 target_player_id;
  uint16 slot;
  uint16 value;
  uint16 score;
  uint16 sort;
  bool valid;
}

library AiActions {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](8);
    _valueSchema[0] = SchemaType.BYTES32;
    _valueSchema[1] = SchemaType.BYTES32;
    _valueSchema[2] = SchemaType.UINT8;
    _valueSchema[3] = SchemaType.UINT16;
    _valueSchema[4] = SchemaType.UINT16;
    _valueSchema[5] = SchemaType.UINT16;
    _valueSchema[6] = SchemaType.UINT16;
    _valueSchema[7] = SchemaType.BOOL;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "card_uid";
    fieldNames[1] = "target_uid";
    fieldNames[2] = "target_player_id";
    fieldNames[3] = "slot";
    fieldNames[4] = "value";
    fieldNames[5] = "score";
    fieldNames[6] = "sort";
    fieldNames[7] = "valid";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get card_uid.
   */
  function getCard_uid(bytes32 key) internal view returns (bytes32 card_uid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get card_uid.
   */
  function _getCard_uid(bytes32 key) internal view returns (bytes32 card_uid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set card_uid.
   */
  function setCard_uid(bytes32 key, bytes32 card_uid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((card_uid)), _fieldLayout);
  }

  /**
   * @notice Set card_uid.
   */
  function _setCard_uid(bytes32 key, bytes32 card_uid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((card_uid)), _fieldLayout);
  }

  /**
   * @notice Get target_uid.
   */
  function getTarget_uid(bytes32 key) internal view returns (bytes32 target_uid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get target_uid.
   */
  function _getTarget_uid(bytes32 key) internal view returns (bytes32 target_uid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set target_uid.
   */
  function setTarget_uid(bytes32 key, bytes32 target_uid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((target_uid)), _fieldLayout);
  }

  /**
   * @notice Set target_uid.
   */
  function _setTarget_uid(bytes32 key, bytes32 target_uid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((target_uid)), _fieldLayout);
  }

  /**
   * @notice Get target_player_id.
   */
  function getTarget_player_id(bytes32 key) internal view returns (uint8 target_player_id) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get target_player_id.
   */
  function _getTarget_player_id(bytes32 key) internal view returns (uint8 target_player_id) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set target_player_id.
   */
  function setTarget_player_id(bytes32 key, uint8 target_player_id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((target_player_id)), _fieldLayout);
  }

  /**
   * @notice Set target_player_id.
   */
  function _setTarget_player_id(bytes32 key, uint8 target_player_id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((target_player_id)), _fieldLayout);
  }

  /**
   * @notice Get slot.
   */
  function getSlot(bytes32 key) internal view returns (uint16 slot) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get slot.
   */
  function _getSlot(bytes32 key) internal view returns (uint16 slot) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set slot.
   */
  function setSlot(bytes32 key, uint16 slot) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((slot)), _fieldLayout);
  }

  /**
   * @notice Set slot.
   */
  function _setSlot(bytes32 key, uint16 slot) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((slot)), _fieldLayout);
  }

  /**
   * @notice Get value.
   */
  function getValue(bytes32 key) internal view returns (uint16 value) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get value.
   */
  function _getValue(bytes32 key) internal view returns (uint16 value) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set value.
   */
  function setValue(bytes32 key, uint16 value) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((value)), _fieldLayout);
  }

  /**
   * @notice Set value.
   */
  function _setValue(bytes32 key, uint16 value) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((value)), _fieldLayout);
  }

  /**
   * @notice Get score.
   */
  function getScore(bytes32 key) internal view returns (uint16 score) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get score.
   */
  function _getScore(bytes32 key) internal view returns (uint16 score) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set score.
   */
  function setScore(bytes32 key, uint16 score) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((score)), _fieldLayout);
  }

  /**
   * @notice Set score.
   */
  function _setScore(bytes32 key, uint16 score) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((score)), _fieldLayout);
  }

  /**
   * @notice Get sort.
   */
  function getSort(bytes32 key) internal view returns (uint16 sort) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get sort.
   */
  function _getSort(bytes32 key) internal view returns (uint16 sort) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set sort.
   */
  function setSort(bytes32 key, uint16 sort) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((sort)), _fieldLayout);
  }

  /**
   * @notice Set sort.
   */
  function _setSort(bytes32 key, uint16 sort) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((sort)), _fieldLayout);
  }

  /**
   * @notice Get valid.
   */
  function getValid(bytes32 key) internal view returns (bool valid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get valid.
   */
  function _getValid(bytes32 key) internal view returns (bool valid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set valid.
   */
  function setValid(bytes32 key, bool valid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((valid)), _fieldLayout);
  }

  /**
   * @notice Set valid.
   */
  function _setValid(bytes32 key, bool valid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((valid)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 key) internal view returns (AiActionsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 key) internal view returns (AiActionsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 key,
    bytes32 card_uid,
    bytes32 target_uid,
    uint8 target_player_id,
    uint16 slot,
    uint16 value,
    uint16 score,
    uint16 sort,
    bool valid
  ) internal {
    bytes memory _staticData = encodeStatic(card_uid, target_uid, target_player_id, slot, value, score, sort, valid);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 key,
    bytes32 card_uid,
    bytes32 target_uid,
    uint8 target_player_id,
    uint16 slot,
    uint16 value,
    uint16 score,
    uint16 sort,
    bool valid
  ) internal {
    bytes memory _staticData = encodeStatic(card_uid, target_uid, target_player_id, slot, value, score, sort, valid);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 key, AiActionsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.card_uid,
      _table.target_uid,
      _table.target_player_id,
      _table.slot,
      _table.value,
      _table.score,
      _table.sort,
      _table.valid
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 key, AiActionsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.card_uid,
      _table.target_uid,
      _table.target_player_id,
      _table.slot,
      _table.value,
      _table.score,
      _table.sort,
      _table.valid
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bytes32 card_uid,
      bytes32 target_uid,
      uint8 target_player_id,
      uint16 slot,
      uint16 value,
      uint16 score,
      uint16 sort,
      bool valid
    )
  {
    card_uid = (Bytes.slice32(_blob, 0));

    target_uid = (Bytes.slice32(_blob, 32));

    target_player_id = (uint8(Bytes.slice1(_blob, 64)));

    slot = (uint16(Bytes.slice2(_blob, 65)));

    value = (uint16(Bytes.slice2(_blob, 67)));

    score = (uint16(Bytes.slice2(_blob, 69)));

    sort = (uint16(Bytes.slice2(_blob, 71)));

    valid = (_toBool(uint8(Bytes.slice1(_blob, 73))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (AiActionsData memory _table) {
    (
      _table.card_uid,
      _table.target_uid,
      _table.target_player_id,
      _table.slot,
      _table.value,
      _table.score,
      _table.sort,
      _table.valid
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bytes32 card_uid,
    bytes32 target_uid,
    uint8 target_player_id,
    uint16 slot,
    uint16 value,
    uint16 score,
    uint16 sort,
    bool valid
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(card_uid, target_uid, target_player_id, slot, value, score, sort, valid);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bytes32 card_uid,
    bytes32 target_uid,
    uint8 target_player_id,
    uint16 slot,
    uint16 value,
    uint16 score,
    uint16 sort,
    bool valid
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(card_uid, target_uid, target_player_id, slot, value, score, sort, valid);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
